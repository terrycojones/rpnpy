[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "rpnpy"
version = "3.0.11"
description = "Control an RPN calculator from Python."
authors = [
    { name = "Terry C. Jones", email = "terence.jones@charite.de" },
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["rpn", "reverse", "polish", "calculator", "TUI"]
dependencies = [
    "engineering_notation",
    "gnureadline>=8.2.13",
    "rich>=14.2.0",
    "textual>=0.82.0",
]

[project.urls]
Homepage = "https://github.com/terrycojones/rpnpy"
Repository = "https://github.com/terrycojones/rpnpy"
Download = "https://github.com/terrycojones/rpnpy"

[project.scripts]
rpnpy = "rpnpy.cli:main"

[dependency-groups]
dev = [
    "bump-my-version>=0.30.0",
    "nox>=2025.10.16",
    "pytest",
    "ruff",
]

[tool.hatch.build.targets.wheel]
packages = ["src/rpnpy"]

[tool.pytest.ini_options]
testpaths = ["test"]
pythonpath = ["src"]

[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
]
ignore = [
    "UP031",  # Percent-style string formatting.
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.bumpversion]
current_version = "3.0.11"
commit = true
tag = true
tag_name = "{new_version}"
tag_message = "Version {new_version}"
message = "Bump version: {current_version} â†’ {new_version}"

pre_commit_hooks = [
    # Regenerate uv.lock after version bump and add it to the commit
    "uv lock",
    "git add uv.lock",
]

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'
